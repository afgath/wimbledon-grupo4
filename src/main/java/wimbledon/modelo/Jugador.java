package wimbledon.modelo;
// Generated 15/11/2018 09:04:19 PM by Hibernate Tools 4.3.5.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Jugador generated by hbm2java
 */
@Entity
@Table(name = "jugador", schema = "public")
public class Jugador implements java.io.Serializable {

	private long idjugador;
	private String nombre;
	private String apellido;
	private boolean rankeado;
	private Set<Drawintegrantes> drawintegranteses = new HashSet<Drawintegrantes>(0);
	private Set<Partido> partidosForJugador2 = new HashSet<Partido>(0);
	private Set<Equipo> equiposForJugador1 = new HashSet<Equipo>(0);
	private Set<Partido> partidosForJugadorganador = new HashSet<Partido>(0);
	private Set<Equipo> equiposForJugador2 = new HashSet<Equipo>(0);
	private Set<Partido> partidosForJugador1 = new HashSet<Partido>(0);

	public Jugador() {
	}

	public Jugador(long idjugador, String nombre, String apellido, boolean rankeado) {
		this.idjugador = idjugador;
		this.nombre = nombre;
		this.apellido = apellido;
		this.rankeado = rankeado;
	}

	public Jugador(long idjugador, String nombre, String apellido, boolean rankeado,
			Set<Drawintegrantes> drawintegranteses, Set<Partido> partidosForJugador2, Set<Equipo> equiposForJugador1,
			Set<Partido> partidosForJugadorganador, Set<Equipo> equiposForJugador2, Set<Partido> partidosForJugador1) {
		this.idjugador = idjugador;
		this.nombre = nombre;
		this.apellido = apellido;
		this.rankeado = rankeado;
		this.drawintegranteses = drawintegranteses;
		this.partidosForJugador2 = partidosForJugador2;
		this.equiposForJugador1 = equiposForJugador1;
		this.partidosForJugadorganador = partidosForJugadorganador;
		this.equiposForJugador2 = equiposForJugador2;
		this.partidosForJugador1 = partidosForJugador1;
	}

	@Id

	@Column(name = "idjugador", unique = true, nullable = false)
	public long getIdjugador() {
		return this.idjugador;
	}

	public void setIdjugador(long idjugador) {
		this.idjugador = idjugador;
	}

	@Column(name = "nombre", nullable = false, length = 30)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "apellido", nullable = false, length = 30)
	public String getApellido() {
		return this.apellido;
	}

	public void setApellido(String apellido) {
		this.apellido = apellido;
	}

	@Column(name = "rankeado", nullable = false)
	public boolean isRankeado() {
		return this.rankeado;
	}

	public void setRankeado(boolean rankeado) {
		this.rankeado = rankeado;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugador")
	public Set<Drawintegrantes> getDrawintegranteses() {
		return this.drawintegranteses;
	}

	public void setDrawintegranteses(Set<Drawintegrantes> drawintegranteses) {
		this.drawintegranteses = drawintegranteses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugadorByJugador2")
	public Set<Partido> getPartidosForJugador2() {
		return this.partidosForJugador2;
	}

	public void setPartidosForJugador2(Set<Partido> partidosForJugador2) {
		this.partidosForJugador2 = partidosForJugador2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugadorByJugador1")
	public Set<Equipo> getEquiposForJugador1() {
		return this.equiposForJugador1;
	}

	public void setEquiposForJugador1(Set<Equipo> equiposForJugador1) {
		this.equiposForJugador1 = equiposForJugador1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugadorByJugadorganador")
	public Set<Partido> getPartidosForJugadorganador() {
		return this.partidosForJugadorganador;
	}

	public void setPartidosForJugadorganador(Set<Partido> partidosForJugadorganador) {
		this.partidosForJugadorganador = partidosForJugadorganador;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugadorByJugador2")
	public Set<Equipo> getEquiposForJugador2() {
		return this.equiposForJugador2;
	}

	public void setEquiposForJugador2(Set<Equipo> equiposForJugador2) {
		this.equiposForJugador2 = equiposForJugador2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jugadorByJugador1")
	public Set<Partido> getPartidosForJugador1() {
		return this.partidosForJugador1;
	}

	public void setPartidosForJugador1(Set<Partido> partidosForJugador1) {
		this.partidosForJugador1 = partidosForJugador1;
	}

}
